generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL_PRISMA")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String        @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  apiKeys       ApiKey[]
  manualTrades  ManualTrade[] // Add this line
}

model Exchange {
  id     String   @id @default(cuid())
  name   String   @unique
  apiKey ApiKey[]
}

model ApiKey {
  id           String   @id @default(cuid())
  keyAlias     String
  publicKey    String
  secretKey    String
  exchange     Exchange @relation(fields: [exchangeName], references: [name], onDelete: Cascade)
  exchangeName String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model ManualTrade {
  id          String   @id
  opentm      Float
  closetm     Float
  pair        String
  type        String
  ordertype   String
  price       String
  price2      String
  leverage    String
  order       String
  close       String
  vol         String
  vol_exec    String
  cost        String
  fee         String
  stopprice   String
  limitprice  String
  misc        String
  oflags      String
  reason      String
  timestamp   Float
  datetime    DateTime
  status      String
  symbol      String
  timeInForce String
  postOnly    Boolean
  side        String
  amount      Float
  filled      Float
  average     Float
  remaining   Float
  fees        Json
  trades      Json
  exchange    String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}
