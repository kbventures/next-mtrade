Feature to add API from any exchange with tests
Setup Next.js App as an image and orchestres the db and the app in docker-compose.yml 
Fast setup process to install
Get Deploy working again
Update documentation
Internationalize the trades screen
Get Kraken API Data for Demo but duplicte it 15 times
Insert Data in form and refactor form
Fix CSS minor glitches
Work on authenticated features
Setup CIDC on github
Setup Automated Tests Locally and on Github


Resources:
Authentiction resource: https://www.youtube.com/watch?v=fqXC2V-MSV4
Next Auth Examples:
https://next-auth-example.vercel.app/
Next Auth Documentation:

If you're using Next.js 13.2 or above with the new App Router (app/), you can initialize the configuration using the new Route Handlers by following our guide.:
https://next-auth.js.org/configuration/initialization#route-handlers-app


Scripts:
clear && npm cache clean --force && npm run dev --turbolear && npm cache clean --force && npm run dev --t

Resources for blog
Authentiction resource: https://www.youtube.com/watch?v=fqXC2V-MSV4
https://vercel.com/guides/nextjs-prisma-postgres
https://github.com/max-programming/auth-creds-tutorial


Typescript Module Augmentation
https://dev.to/josemukorivo/unlock-next-level-authentication-in-nextjs-with-next-auth-and-typescript-module-augmentation-1689


Dmitry next-auth.t.ds custom fields
https://github.com/dmitrykulakovfrontend/InterviewPlayBook/blob/main/types/next-auth.d.ts


Next.js configuration article
https://www.ryanelainska.com/nextjs-starter


How to close dropdown on outside click NEXT.JS
https://stackoverflow.com/questions/63086609/how-to-close-dropdown-on-outside-click-next-js



Example closed trade object:
{
  closed: {
    'OCOIRM-3AVHM-7B2YLW': {
      refid: null,
      userref: null,
      status: 'closed',
      opentm: 1588830213.657734,
      starttm: 0,
      expiretm: 0,
      descr: [Object],
      vol: '0.34000000',
      vol_exec: '0.34000000',
      cost: '4497.14600',
      fee: '11.69258',
      price: '13226.9',
      stopprice: '0.00000',
      limitprice: '0.00000',
      misc: '',
      oflags: 'fciq',
      reason: null,
      closetm: 1588830213.6665378
    }
  },
  count: 1
}

List of todos in order: 
Demo 
Demo User Login
ADD New User(Authentication + kraken keys)
Lighthouse report: SEO, Accessibility, best practices & performance 
Testing: Unit Test, Intergration Test, e2e
Dockerize your local setup(Local Postgresql Instance)
pull request lint test build merge pr create image etc
Internationalization
authentication
Responsive
Goland Back End
Project Management(See docker course for example)
Documentation
Trades not from exchange?s
Visualization of trade data 
Create a kron job so the project will not shut down due to superbase inactivity
https://cron-job.org/en/


Right now: 
Internationalization
Make demo data work has if its coming from kraken
Make version work for where user creates new kraken api
One Test Of Each
pull request lint test build merge pr create image etc

Nice to have:
Third Party API(Websockerse live data)
Change Password using email and create user using email as confirmation
Stripe for payements
UML Diagram
Setup Project Management
Postman Files

Need to fix some minor css issues
Update SQL Structure For Users And Trades
Session for language





Build your images seperately and then combine them using docker compose
https://www.reddit.com/r/docker/comments/18d7641/ive_been_trying_to_set_up_docker_with_prisma/

Testing Crash Course:
https://betterprogramming.pub/a-crash-course-in-testing-next-js-projects-9fc57ed4a5bb


Runs services found in you docker-compose.yml file
sudo docker-compose up -d

Container Service Status: 
sudo docker-compose ps

Postgresql shell inside container: 
sudo docker-compose exec postgres psql -U mtrade -d mtrade-db


Next.js Image
sudo docker build -t mtrade-app-test .
sudo docker run -p 3000:3000 --env-file .env.local mtrade-app-test
sudo docker-compose logs -f

ALSO REMOVE VOLUMES
sudo docker-compose down -v




upgrade to version 4: next auth
https://next-auth.js.org/getting-started/upgrade-v4
Setting up images with Sharp?(recomended by next.js)
https://blog.logrocket.com/processing-images-sharp-node-js/

Prisma Vercel Solution: 
https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/vercel-caching-issue


// To Run Docker locally 
docker-compose -f docker-compose.dev.yml up -d
sudo docker-compose exec postgres psql -U mtrade -d mtrade-db




docker-compose exec nextjs-app npx prisma generate



// Prisma manual db push. You need to run this again when you bring the volumes down. 
docker exec -it mtrade-app-dev npx dotenv -e .env.local -- prisma db push


TODO NEXTdocker
Fix add api colors
Make Responsive
Make changes to SQL and api request
trades page
analysisq



Your API Key Page checks to see if any exiss
If they do they show them in the page they show them by exchange category
clicking on exchange takes you to the list of available apis where you can or delete

Start here: 
If they don't exist you shoudl be ad the add exchange api screen by default

docker exec -it mtrade-app-dev npx dotenv -e .env.local -- prisma db push
docker-compose -f docker-compose.dev.yml up -d --build --no-cache
sudo docker-compose exec postgres psql -U mtrade -d mtrade-db



Fetch The available exchanges that should popular in your api adition menu
Add exchange 
Add exchange to user should change ux/ui
Option to delete exchange(Further modification later)
Then work on showing the data from BOTH exchanges 
Simple Analysis visual




//Basic start up 
docker-compose -f docker-compose.dev.yml up -d --build
sudo docker-compose exec postgres psql -U mtrade -d mtrade-db
docker logs mtrade-app-dev
// Prisma manual db push. You need to run this again when you bring the volumes down. 
docker exec -it mtrade-app-dev npx dotenv -e .env.local -- prisma db push

// Database refresh
docker-compose down -v
docker-compose exec nextjs-app npx prisma generate
docker exec -it mtrade-app-dev npx dotenv -e .env.local -- prisma db push
Need to insert Exchanges manually:
insert into "Exchange" (id, name) values (gen_random_uuid(), 'Commex');  




// auth helper function
https://next-auth.js.org/configuration/nextjs#getserversession
